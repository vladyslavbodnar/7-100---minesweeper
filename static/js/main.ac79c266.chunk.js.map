{"version":3,"sources":["utils/generateColors.js","components/Cell.js","utils/changeFlag.js","utils/revealCell.js","utils/revealBombs.js","utils/calcLeftFlags.js","components/Board.js","components/EndGame.js","components/Menu.js","utils/createBoard.js","App.js","index.js"],"names":["generateMineColor","cell","bomb","open","bombColor","Math","floor","random","length","chexPattern","x","y","Cell","num","style","background","color","minesNear","className","flag","changeFlag","board","map","row","revealCell","newNonMinesCount","flipped","push","single","pop","revealBombs","flaggedCells","difficulty","mines","reduce","acc","Board","setBoard","gameStatus","setGameStatus","emptyCellsLeft","setEmptyCellsLeft","setFlagsLeft","useEffect","onClick","result","calcLeftFlags","clickCell","onContextMenu","e","preventDefault","flagCell","EndGame","newGame","Menu","setDifficulty","flagsLeft","value","onChange","target","createBoard","size","minesCount","tempX","tempY","App","useState","boardState","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ac79c266.chunk.js","sourcesContent":["export const generateMineColor = (cell) => {\n    if (cell.bomb && cell.open) {\n        const bombColor = [\"Aquamarine\", \"AntiqueWhite\", \"BlueViolet\", \"Brown\", \"Chocolate\", \"DeepPink\", \"Khaki\", \"Lime\"];\n        return bombColor[Math.floor(Math.random() * bombColor.length)];\n    }\n};\n\nexport const bombChexPattern = (x, y) => {\n    if (x % 2 === 0 && y % 2 === 0) {\n        return \"#e5c29f\";\n    } else if (x % 2 === 0 && y % 2 !== 0) {\n        return \"#d7b899\";\n    } else if (x % 2 !== 0 && y % 2 === 0) {\n        return \"#d7b899\";\n    } else {\n        return \"#e5c29f\";\n    }\n};\n\nexport const chexPattern = (x, y) => {\n    if (x % 2 === 0 && y % 2 === 0) {\n        return \"#aad751\";\n    } else if (x % 2 === 0 && y % 2 !== 0) {\n        return \"#a2d249\";\n    } else if (x % 2 !== 0 && y % 2 === 0) {\n        return \"#a2d249\";\n    } else {\n        return \"#aad751\";\n    }\n};\n\nexport const numColorCode = (num) => {\n    if (num === 1) {\n        return \"#1976d2\";\n    } else if (num === 2) {\n        return \"#388d3c\";\n    } else if (num === 3) {\n        return \"#d33030\";\n    } else if (num === 4) {\n        return \"#7c21a2\";\n    } else if (num === 5) {\n        return \"#1976d2\";\n    } else if (num === 6) {\n        return \"#1976d2\";\n    } else {\n        return \"white\";\n    }\n};\n","import {generateMineColor, bombChexPattern, chexPattern, numColorCode} from \"../utils/generateColors\";\n\nconst Cell = ({ cell }) => {\n    const style = {\n        background: cell.open\n            ? cell.bomb\n            ? generateMineColor(cell)\n            : bombChexPattern(cell.x, cell.y)\n            : chexPattern(cell.x, cell.y),\n        color: numColorCode(cell.minesNear),\n    };\n\n    return (\n        <div className=\"Cell\" style={style}>\n            {cell.bomb && cell.open && \"💣\"}\n            {cell.open && !cell.bomb && cell.minesNear !== 0 && cell.minesNear}\n            {cell.flag && !cell.open && \"🚩\"}\n        </div>\n    );\n};\n\nexport default Cell;\n\n\n","const changeFlag = (x,y,board) => {\n    board = board.map(row => row.map(cell => {\n        if(cell.x === x && cell.y === y) {\n            return {...cell, flag: !cell.flag}\n        }\n        return cell\n    }))\n\n    return board;\n}\n\nexport default changeFlag","const revealCell = (x, y, board, newNonMinesCount) => {\n    if (board[x][y].open) return;\n\n    let flipped = [];\n    flipped.push(board[x][y]);\n\n    while (flipped.length !== 0) {\n        let single = flipped.pop();\n\n        if (!single.open) {\n            newNonMinesCount--;\n            single.open = true;\n            single.flag = false;\n        }\n\n        if (single.minesNear !== 0 && !single.bomb) {\n            break;\n        }\n\n        //Top - Left\n        if (single.x > 0 && single.y > 0 && board[single.x - 1][single.y - 1].minesNear === 0 && !board[single.x - 1][single.y - 1].open) {\n            flipped.push(board[single.x - 1][single.y - 1]);\n        }\n\n        // Bottom - Right\n        if (\n            single.x < board.length - 1 &&\n            single.y < board[0].length - 1 &&\n            board[single.x + 1][single.y + 1].minesNear === 0 &&\n            !board[single.x + 1][single.y + 1].open\n        ) {\n            flipped.push(board[single.x + 1][single.y + 1]);\n        }\n\n        // Bottom - Left\n        if (\n            single.x < board.length - 1 &&\n            single.y > 0 &&\n            board[single.x + 1][single.y - 1].minesNear === 0 &&\n            !board[single.x + 1][single.y - 1].open\n        ) {\n            flipped.push(board[single.x + 1][single.y - 1]);\n        }\n\n        // Top - Right\n        if (\n            single.x > 0 &&\n            single.y < board[0].length - 1 &&\n            board[single.x - 1][single.y + 1].minesNear === 0 &&\n            !board[single.x - 1][single.y + 1].open\n        ) {\n            flipped.push(board[single.x - 1][single.y + 1]);\n        }\n\n        // Single ones\n\n        // Top\n        if (single.x > 0 && board[single.x - 1][single.y].minesNear === 0 && !board[single.x - 1][single.y].open) {\n            flipped.push(board[single.x - 1][single.y]);\n        }\n\n        // Bottom\n        if (single.x < board.length - 1 && board[single.x + 1][single.y].minesNear === 0 && !board[single.x + 1][single.y].open) {\n            flipped.push(board[single.x + 1][single.y]);\n        }\n\n        // Left\n        if (single.y > 0 && board[single.x][single.y - 1].minesNear === 0 && !board[single.x][single.y - 1].open) {\n            flipped.push(board[single.x][single.y - 1]);\n        }\n\n        // Right\n        if (single.y < board[0].length - 1 && board[single.x][single.y + 1].minesNear === 0 && !board[single.x][single.y + 1].open) {\n            flipped.push(board[single.x][single.y + 1]);\n        }\n\n        // Start Revealing Items\n        if (single.x > 0 && single.y > 0 && !board[single.x - 1][single.y - 1].open) {\n            //Top Left Reveal\n\n            board[single.x - 1][single.y - 1].open = true;\n            board[single.x - 1][single.y - 1].flag = false;\n            newNonMinesCount--;\n        }\n\n        if (single.y > 0 && !board[single.x][single.y - 1].open) {\n            // Left Reveal\n            board[single.x][single.y - 1].open = true;\n            board[single.x][single.y - 1].flag = false;\n            newNonMinesCount--;\n        }\n\n        if (single.x < board.length - 1 && single.y > 0 && !board[single.x + 1][single.y - 1].open) {\n            //Bottom Left Reveal\n            board[single.x + 1][single.y - 1].open = true;\n            board[single.x + 1][single.y - 1].flag = false;\n            newNonMinesCount--;\n        }\n\n        if (single.x > 0 && !board[single.x - 1][single.y].open) {\n            //Top Reveal\n            board[single.x - 1][single.y].open = true;\n            board[single.x - 1][single.y].flag = false;\n            newNonMinesCount--;\n        }\n\n        if (single.x < board.length - 1 && !board[single.x + 1][single.y].open) {\n            // Bottom Reveal\n            board[single.x + 1][single.y].open = true;\n            board[single.x + 1][single.y].flag = false;\n            newNonMinesCount--;\n        }\n\n        if (single.x > 0 && single.y < board[0].length - 1 && !board[single.x - 1][single.y + 1].open) {\n            // Top Right Reveal\n            board[single.x - 1][single.y + 1].open = true;\n            board[single.x - 1][single.y + 1].flag = false;\n            newNonMinesCount--;\n        }\n\n        if (single.y < board[0].length - 1 && !board[single.x][single.y + 1].open) {\n            //Right Reveal\n            board[single.x][single.y + 1].open = true;\n            board[single.x][single.y + 1].flag = false;\n            newNonMinesCount--;\n        }\n\n        if (single.x < board.length - 1 && single.y < board[0].length - 1 && !board[single.x + 1][single.y + 1].open) {\n            // Bottom Right Reveal\n            board[single.x + 1][single.y + 1].open = true;\n            board[single.x + 1][single.y + 1].flag = false;\n            newNonMinesCount--;\n        }\n    }\n\n    return { board, newNonMinesCount };\n};\n\nexport default revealCell;\n","const revealBombs = (board) => {\n    board = board.map((row) =>\n        row.map((cell) => {\n            if (cell.bomb && !cell.open) {\n                return { ...cell, open: true };\n            }\n            return cell;\n        })\n    );\n\n    return board;\n};\n\nexport default revealBombs;\n","const flaggedCells = (board, difficulty) => {\n    let mines;\n\n    if (difficulty === \"easy\") {\n        mines = 10;\n    } else if (difficulty === \"medium\") {\n        mines = 40;\n    } else if (difficulty === \"hard\") {\n        mines = 100;\n    }\n\n    const flags = board.reduce((acc, row) => {\n        return (\n            acc +\n            row.reduce((acc, cell) => {\n                if (cell.flag) {\n                    return acc + 1;\n                }\n                return acc;\n            }, 0)\n        );\n    }, 0);\n\n    return mines - flags;\n};\n\nexport default flaggedCells;\n","import Cell from \"./Cell\";\nimport changeFlag from \"../utils/changeFlag\";\nimport revealCell from \"../utils/revealCell\";\nimport revealBombs from \"../utils/revealBombs\";\nimport { useEffect } from \"react\";\nimport calcLeftFlags from \"../utils/calcLeftFlags\";\n\nconst Board = ({ board, setBoard, gameStatus, setGameStatus, emptyCellsLeft, setEmptyCellsLeft, setFlagsLeft, difficulty }) => {\n    const flagCell = (cell) => {\n        if (!gameStatus || cell.open) return;\n        let result = changeFlag(cell.x, cell.y, board);\n        setBoard(result);\n    };\n\n    const clickCell = (cell) => {\n        // if game has ended\n        if (!gameStatus || cell.open) return;\n\n        // game over if a cell has bomb\n        if (cell.bomb) {\n            setBoard(revealBombs(board));\n            setGameStatus(false);\n            return;\n        }\n\n        let result = revealCell(cell.x, cell.y, board, emptyCellsLeft);\n        setBoard(result.board);\n        setEmptyCellsLeft(result.newNonMinesCount);\n        setFlagsLeft(calcLeftFlags(board, difficulty));\n    };\n\n    useEffect(() => {\n        // end game if all empty cell are open\n        if (emptyCellsLeft === 0) {\n            setGameStatus(false);\n            setBoard(revealBombs(board));\n        }\n    }, [emptyCellsLeft]);\n\n    return (\n        <div className=\"Board\">\n            {board &&\n                board.map((row) => {\n                    return (\n                        <div className=\"Board__row\">\n                            {row.map((cell) => {\n                                return (\n                                    <div\n                                        className=\"Board__cell\"\n                                        onClick={() => clickCell(cell)}\n                                        onContextMenu={(e) => {\n                                            e.preventDefault();\n                                            flagCell(cell);\n                                        }}\n                                    >\n                                        <Cell cell={cell} />\n                                    </div>\n                                );\n                            })}\n                        </div>\n                    );\n                })}\n        </div>\n    );\n};\n\nexport default Board;\n","const EndGame = ({ newGame }) => {\n    return (\n        <div className=\"EndGame\">\n            <button onClick={() => newGame()} className=\"EndGame__button\">\n                Start again\n            </button>\n        </div>\n    );\n};\n\nexport default EndGame;\n","const Menu = ({ difficulty, setDifficulty, flagsLeft }) => {\n    return (\n        <div className=\"Menu\">\n            <select className=\"Menu__select\" value={difficulty} onChange={(e) => setDifficulty(e.target.value)}>\n                <option value=\"easy\">Easy</option>\n                <option value=\"medium\">Medium</option>\n                <option value=\"hard\">Hard</option>\n            </select>\n            <p>🚩 {flagsLeft}</p>\n        </div>\n    );\n};\n\nexport default Menu;\n","const createBoard = (difficulty) => {\n    let board = [];\n\n    let size;\n    let mines;\n    let emptyCellsLeft;\n\n    if (difficulty === \"easy\") {\n        size = 10;\n        mines = 10;\n        emptyCellsLeft = size * size - mines;\n    } else if (difficulty === \"medium\") {\n        size = 20;\n        mines = 40;\n        emptyCellsLeft = size * size - mines;\n    } else if (difficulty === \"hard\") {\n        size = 30;\n        mines = 100;\n        emptyCellsLeft = size * size - mines;\n    }\n\n    for (let x = 0; x < size; x++) {\n        const row = [];\n        for (let y = 0; y < size; y++) {\n            row.push({ x, y, bomb: false, flag: false, open: false, minesNear: 0 });\n        }\n        board.push(row);\n    }\n\n    // generate mines\n    let minesCount = mines;\n    while (minesCount !== 0) {\n        let x = Math.floor(Math.random() * size);\n        let y = Math.floor(Math.random() * size);\n\n        if (board[x][y].bomb === false) {\n            board[x][y].bomb = true;\n            minesCount--;\n        }\n    }\n\n    // assign to each cell number of how many mines near it\n    for (let tempX = 0; tempX < size; tempX++) {\n        for (let tempY = 0; tempY < size; tempY++) {\n            if (board[tempX][tempY].bomb) {\n                continue;\n            }\n\n            // Top\n            if (tempX > 0 && board[tempX - 1][tempY].bomb) {\n                board[tempX][tempY].minesNear++;\n            }\n\n            // Top Right\n            if (tempX > 0 && tempY < size - 1 && board[tempX - 1][tempY + 1].bomb) {\n                board[tempX][tempY].minesNear++;\n            }\n\n            // Right\n            if (tempY < size - 1 && board[tempX][tempY + 1].bomb) {\n                board[tempX][tempY].minesNear++;\n            }\n\n            // Botoom Right\n            if (tempX < size - 1 && tempY < size - 1 && board[tempX + 1][tempY + 1].bomb) {\n                board[tempX][tempY].minesNear++;\n            }\n\n            // Bottom\n            if (tempX < size - 1 && board[tempX + 1][tempY].bomb) {\n                board[tempX][tempY].minesNear++;\n            }\n\n            // Bottom Left\n            if (tempX < size - 1 && tempY > 0 && board[tempX + 1][tempY - 1].bomb) {\n                board[tempX][tempY].minesNear++;\n            }\n\n            // LEft\n            if (tempY > 0 && board[tempX][tempY - 1].bomb) {\n                board[tempX][tempY].minesNear++;\n            }\n\n            // Top Left\n            if (tempX > 0 && tempY > 0 && board[tempX - 1][tempY - 1].bomb) {\n                board[tempX][tempY].minesNear++;\n            }\n        }\n    }\n\n    return { board, emptyCellsLeft };\n};\n\nexport default createBoard;\n","import { useEffect, useState } from \"react\";\nimport Board from \"./components/Board\";\nimport EndGame from \"./components/EndGame\";\nimport Menu from \"./components/Menu\";\nimport createBoard from \"./utils/createBoard\";\nimport calcLeftFlags from \"./utils/calcLeftFlags\";\n\nfunction App() {\n    const [difficulty, setDifficulty] = useState(\"medium\");\n    const [board, setBoard] = useState(null);\n    const [emptyCellsLeft, setEmptyCellsLeft] = useState(null);\n    const [gameStatus, setGameStatus] = useState(true);\n    const [flagsLeft, setFlagsLeft] = useState(null);\n\n    useEffect(() => {\n        newGame();\n    }, [difficulty]);\n\n    useEffect(() => {\n        // count how many flags left\n        if (board) {\n            setFlagsLeft(calcLeftFlags(board, difficulty));\n        }\n    }, [board]);\n\n    const newGame = () => {\n        const boardState = createBoard(difficulty);\n        setBoard(boardState.board);\n        setEmptyCellsLeft(boardState.emptyCellsLeft);\n        setGameStatus(true);\n    };\n\n    return (\n        <div className=\"App\">\n            <Menu difficulty={difficulty} setDifficulty={setDifficulty} flagsLeft={flagsLeft} />\n            <Board\n                board={board}\n                setBoard={setBoard}\n                emptyCellsLeft={emptyCellsLeft}\n                setEmptyCellsLeft={setEmptyCellsLeft}\n                gameStatus={gameStatus}\n                setGameStatus={setGameStatus}\n                setFlagsLeft={setFlagsLeft}\n                difficulty={difficulty}\n            />\n\n            {!gameStatus && <EndGame newGame={newGame} />}\n        </div>\n    );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}